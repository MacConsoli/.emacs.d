* Theme
** Solaire
#+BEGIN_SRC emacs-lisp
(use-package solaire-mode
  :hook
  ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
  (minibuffer-setup . solaire-mode-in-minibuffer)
  :config
  (solaire-global-mode +1)
  (solaire-mode-swap-bg))
#+END_SRC

** Doom themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :custom ((doom-themes-enable-bold t)
           (doom-themes-enable-italic t)
           (solaire-mode-remap-modeline nil)
           (doom-themes-treemacs-theme "doom-colors"))
  :config (progn (doom-themes-org-config)
                 (doom-themes-treemacs-config))
  ;; :init (solaire-mode-swap-bg)
  :preface (defvar region-fg nil))
#+END_SRC

** Kaolin Themes
#+BEGIN_SRC emacs-lisp
(use-package kaolin-themes
  :ensure t
  :config (kaolin-treemacs-theme))
#+END_SRC

** Load theme
#+BEGIN_SRC emacs-lisp
(load-theme 'kaolin-galaxy
            :no-confirm)
(setq
 ;; distinct background for fringe and line numbers
 kaolin-themes-distinct-fringe t
 ;; enable italic style in comments
 kaolin-themes-italic-comments t
 ;; display colered hi-line instead of monochrome
 kaolin-themes-hi-line-colored t
 ;; distinct colors for company popup scrollbar
 kaolin-themes-distinct-company-scrollbar t
 ;; modeline border
 kaolin-themes-modeline-border t
 ;; distinct #+TITLE, ...
 kaolin-themes-distinct-metakeys t
 ;; distinct colors for company popup scrollbar
 kaolin-themes-distinct-company-scrollbar t)
#+END_SRC
* Font & icons
** test
   #+begin_src emacs-lisp
;; (use-package composite
;;   :defer t
;;   :init
;;   (defvar composition-ligature-table (make-char-table nil))
;;   :hook
;;   (((prog-mode conf-mode nxml-mode markdown-mode help-mode)
;;     . (lambda () (setq-local composition-function-table composition-ligature-table))))
;;   :config
;;   ;; support ligatures, some toned down to prevent hang
;;   (when (version<= "27.0" emacs-version)
;;     (let ((alist
;;            '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
;;              (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
;;              (36 . ".\\(?:\\(>\\)>?\\)")
;;              (37 . ".\\(?:\\(%\\)%?\\)")
;;              (38 . ".\\(?:\\(&\\)&?\\)")
;;              (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
;;              ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
;;              (43 . ".\\(?:\\([>]\\)>?\\)")
;;              ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
;;              (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
;;              ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
;;              (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
;;              (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
;;              ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
;;              (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
;;              (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
;;              (59 . ".\\(?:\\(;\\);?\\)")
;;              (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
;;              (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
;;              (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
;;              (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
;;              (91 . ".\\(?:\\(|\\)[]|]?\\)")
;;              ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
;;              (94 . ".\\(?:\\(=\\)=?\\)")
;;              (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
;;              (119 . ".\\(?:\\(ww\\)w?\\)")
;;              (123 . ".\\(?:\\(|\\)[|}]?\\)")
;;              (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
;;              (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
;;       (dolist (char-regexp alist)
;;         (set-char-table-range composition-ligature-table (car char-regexp)
;;                               `([,(cdr char-regexp) 0 font-shape-gstring]))))
;;     (set-char-table-parent composition-ligature-table composition-function-table))
;;   )
   #+end_src
** Set font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Cascadia Code" :height 110)
(auto-composition-mode t)

;; https://github.com/luksamuk/emacs-org-dotfiles#fonts
(defun my-adjoin-to-list-or-symbol (element list-or-symbol)
  (let ((list (if (not (listp list-or-symbol))
                  (list list-or-symbol)
                list-or-symbol)))
    (require 'cl-lib)
    (cl-adjoin element list)))
;; Before, it was an (eval-after-load "org"
(add-hook 'org-mode-hook
          (lambda ()
            (mapc (lambda (face)
                    (set-face-attribute
                     face nil
                     :inherit
                     (my-adjoin-to-list-or-symbol
                      'fixed-pitch
                      (face-attribute face :inherit))))
             (list 'org-code 'org-block 'org-table))))
#+END_SRC
** teste
   #+begin_src emacs-lisp
(when (version<= "27.0" emacs-version)
  (defvar composition-ligature-table (make-char-table nil))
  (let ((alist
         '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
           (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
           (36 . ".\\(?:\\(>\\)>?\\)")
           (37 . ".\\(?:\\(%\\)%?\\)")
           (38 . ".\\(?:\\(&\\)&?\\)")
           (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
           ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
           (43 . ".\\(?:\\([>]\\)>?\\)")
           ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
           (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
           ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
           (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
           (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
           ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
           (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
           (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
           (59 . ".\\(?:\\(;\\);?\\)")
           (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
           (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
           (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
           (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
           (91 . ".\\(?:\\(|\\)[]|]?\\)")
           ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
           (94 . ".\\(?:\\(=\\)=?\\)")
           (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
           (119 . ".\\(?:\\(ww\\)w?\\)")
           (123 . ".\\(?:\\(|\\)[|}]?\\)")
           (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
           (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
    (dolist (char-regexp alist)
      (set-char-table-range composition-ligature-table (car char-regexp)
                            `([,(cdr char-regexp) 0 font-shape-gstring]))))
  (set-char-table-parent composition-ligature-table composition-function-table)
  (add-hook 'prog-mode-hook '(lambda () (setq-local composition-function-table composition-ligature-table))))
   #+end_src

** Italic comments
#+begin_src emacs-lisp
(custom-set-faces
 '(font-lock-comment-face ((t (:slant italic)))))
#+end_src

** All the icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp
(when window-system
  (add-hook 'prog-mode-hook 'prettify-symbols-mode))
#+END_SRC
* Layout
** No scroll, menu and tool bar 
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)

(when window-system
  (scroll-bar-mode -1))
#+END_SRC

** Line numbers
*** Hook
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

*** Line format
#+BEGIN_SRC emacs-lisp
(setq left-fringe-width 10)
(setq right-fringe-width 3)
;; (setq linum-format " %5d ")

;; https://stackoverflow.com/questions/19540211/configure-linum-mode-to-not-show-whitespace-symbols-in-whitespace-mode
(eval-after-load 'linum
  '(progn
     (defface linum-leading-zero
       `((t :inherit 'linum
            :foreground ,(face-attribute 'linum :background nil t)))
       "Face for displaying leading zeroes for line numbers in display margin."
       :group 'linum)
     (defun linum-format-func (line)
       (let ((w (length
                 (number-to-string (count-lines (point-min) (point-max))))))
         (concat
          "\u2002"
          (propertize (make-string (- w (length (number-to-string line))) ?0)
                      'face 'linum-leading-zero)
          (propertize (number-to-string line) 'face 'linum)
          "\u2002")))
     (setq linum-format 'linum-format-func)))
#+END_SRC
** Highlight line
#+BEGIN_SRC emacs-lisp
(use-package hlinum
  :ensure t
  :init (global-hl-line-mode)
  :config (set-face-background 'hl-line "#1E2029"))
#+END_SRC

* Parens
** Show matchs
#+BEGIN_SRC emacs-lisp
(require 'paren)
;; (set-face-foreground 'show-paren-match "#00BFFF")
(set-face-foreground 'show-paren-match "#FF3377")
(set-face-background 'show-paren-match (face-background 'default))
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
(show-paren-mode 1)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

* Modeline
** Doom modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :custom ((doom-modeline-bar-width 5)
           (doom-modeline-icon t)
           (doom-modeline-project-detection 'projectile)
           (doom-modeline-major-mode-color-icon t)
           (doom-modeline-buffer-file-state 'relative-from-project)
           (doom-modeline-major-mode-icon t)
           (doom-modeline-buffer-state-icon t)
           (doom-modeline-buffer-modification-icon t)
           (doom-modeline-enable-word-count t)
           (doom-modeline-buffer-encoding t)
           (doom-modeline-indent-info t)
           (doom-modeline-lsp t)
           (doom-modeline-env-version t)
           (doom-modeline-height 1)
           (doom-modeline-env-python-executable "ipython")
           (doom-modeline-env-rust-executable "rustc")
           (doom-modeline-env-elixir-executable "iex"))
  :hook (after-init . doom-modeline-mode))
#+END_SRC

** Fancy battery
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :ensure t
  :after (doom-modeline)
  :custom (fancy-battery-show-percentage t)
  :init (fancy-battery-mode))
#+END_SRC

** Nyan cat
#+BEGIN_SRC emacs-lisp
(use-package nyan-mode
  :ensure t
  :custom (nyan-animate-nyancat t)
  (nyan-wavy-trail t)
  (mode-line-format (list
                     '(:eval (list (nyan-create)))))
  :init (nyan-mode))
#+END_SRC

** Clock
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M")
(display-time-mode 1)
#+END_SRC

* Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC

* Treemacs
** Treemacs by itself
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "<f8>") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (treemacs--find-python3) 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (treemacs--find-python3))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("<f8>"      . treemacs)
        ("S-<f8>"    . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC
** Treemacs icons
#+BEGIN_SRC emacs-lisp
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))
#+END_SRC

** Treemacs projectile
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :ensure t
  :after treemacs projectile)
#+END_SRC
* Git
** Fringe Helper
#+BEGIN_SRC emacs-lisp
(use-package fringe-helper
  :ensure t)
#+END_SRC

** Git Gutter
#+BEGIN_SRC emacs-lisp
(use-package git-gutter-fringe+
  :ensure t)
(setq git-gutter-fr+-side 'right-fringe) ;; left side is for flycheck
(set-face-foreground 'git-gutter-fr+-modified "#e77818")
(set-face-background 'git-gutter-fr+-modified "#e77818")
(set-face-foreground 'git-gutter-fr+-deleted "#a20417")
(set-face-background 'git-gutter-fr+-deleted "#a20417")
(set-face-foreground 'git-gutter-fr+-added "#007144")
(set-face-background 'git-gutter-fr+-added "#007144")
(setq-default right-fringe-width 10)
(global-git-gutter+-mode)
#+END_SRC

** Treemacs magit
#+BEGIN_SRC emacs-lisp
(use-package treemacs-magit
  :after (treemacs magit)
  :ensure t)
#+END_SRC

* Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :requires (all-the-icons projectile)
  :config (progn
            (dashboard-setup-startup-hook)
            (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
                  dashboard-banner-logo-title "HAPPY HACKING"
                  dashboard-startup-banner (concat user-emacs-directory "img/pink_banner.png")
                  dashboard-center-content    t
                  dashboard-set-heading-icons t
                  dashboard-set-file-icons    t
                  dashboard-set-navigator     t
                  dashboard-set-init-info     t
                  dashboard-set-navigator     t
                  show-week-agenda-p          t

                  dashboard-items '((bookmarks . 5)
                                    (projects  . 5)
                                    (agenda))

                  dashboard-navigator-buttons
                  `(( ;; line one
                     (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                      "" "Github"
                      (lambda (&rest _) (browse-url "https://github.com/macconsoli")))

                     (,(all-the-icons-faicon "gitlab" :height 1.1 :v-adjust 0.0)
                      "" "Gitlab"
                      (lambda (&rest _) (browse-url "https://gitlab.com/consoli")))

                     (,(all-the-icons-material "email" :height 1.1 :v-adjust -0.13)
                      "" "Email"
                      (lambda (&rest _) (message "Install mu4e")))
                     )

                    ( ;; line two
                     (,(all-the-icons-faicon "youtube-play" :height 1.1 :v-adjust 0.0)
                      "" "Youtube"
                      (lambda (&rest _) (browse-url "https://youtube.com")))

                     (,(all-the-icons-faicon "rss-square" :height 1.1 :v-adjust 0.0)
                      "" "Elfeed"
                      (lambda (&rest _) (elfeed)))

                     (,(all-the-icons-faicon "refresh" :height 1.1 :v-adjust 0.0)
                      "" "Refresh Dashboard"
                      (lambda (&rest _) (dashboard-refresh-buffer))))))))
#+END_SRC
