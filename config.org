#+CAPTION: A 'purpled' screenshot of my emacs
[[./img/screenshot.png]]


* Use packages
** General
   #+BEGIN_SRC emacs-lisp
    (use-package general
        :ensure t)
   #+END_SRC
** [UNUSED] Eshell
   i get this stuf on [[http:www.howardism.org/Technical/Emacs/eshell-fun.html][Eschewing Zshell for Emacs Shell]] post and this [[https:github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][github repo]].
   #+BEGIN_SRC emacs-lisp
     ;; (use-package eshell
     ;;   :init
     ;;   (setq
     ;;    eshell-scroll-to-bottom-on-input 'all
     ;;    eshell-error-if-no-glob t
     ;;    eshell-hist-ignoredups t
     ;;    eshell-save-history-on-exit t
     ;;    eshell-prefer-lisp-functions nil
     ;;    eshell-destroy-buffer-when-process-dies t)
     ;;   (add-hook 'eshell-mode-hook
     ;;         (lambda ()
     ;;           (add-to-list 'eshell-visual-commands "ssh")
     ;;           (add-to-list 'eshell-visual-commands "tail")
     ;;           (add-to-list 'eshell-visual-commands "top"))))
   #+END_SRC
*** closing eshell
    #+BEGIN_SRC emacs-lisp
      (defun eshell/x ()
        (insert "exit")
        (eshell-send-input)
        (delete-window))
    #+END_SRC
*** set up the correct path
    #+BEGIN_SRC emacs-lisp
      (setenv "PATH"
          (concat
           "/usr/local/bin/:/usr/local/sbin:"
           (getenv "PATH")))
    #+END_SRC
*** clear
    #+BEGIN_SRC emacs-lisp
      (defun eshell-clear ()
    "Clear the eshell buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)
      (eshell-send-input)))
    #+END_SRC
** Try
   #+BEGIN_SRC emacs-lisp
    (use-package try
        :ensure t)
   #+END_SRC
** Which-key
   #+BEGIN_SRC emacs-lisp
    (use-package which-key
        :ensure t
        :config (which-key-mode))
   #+END_SRC
** Org bullets
   #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
        :ensure t
        :init (setq org-bullets-bullet-list
                    '("◉" "☢"  "☣" "⚛" "☠"))
        :config (add-hook `org-mode-hook
                        (lambda () (org-bullets-mode 1))))
   #+END_SRC
** Org export
*** ox-reveal
    #+BEGIN_SRC emacs-lisp
      (use-package ox-reveal
        :ensure ox-reveal)
        (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
        (setq org-reveal-mathjax t)
    #+END_SRC
*** HTML
    #+BEGIN_SRC emacs-lisp
      (use-package htmlize
        :ensure t)
    #+END_SRC
** Multi-term
   #+BEGIN_SRC emacs-lisp
     (use-package multi-term
       :ensure t
       :bind ("<f6>" . multi-term-dedicated-toggle)
       :config (setq multi-term-program "/bin/zsh"
                     multi-term-dedicated-close-back-to-open-buffer-p t)
       (add-hook 'term-mode-hook
                 (lambda ()
                   (dolist
                       (bind '(("C-y" . term-paste)
                               ("C-<backspace>" . term-send-backward-kill-word)
                               ("C-c C-c" . term-interrupt-subjob)
                               ("C-s" . isearch-forward)
                               ("C-r" . isearch-backward)))
                     (add-to-list 'term-bind-key-alist bind)))))
   #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-startup-banner "~/.emacs.d/img/banner_epurple.png")
       (setq dashboard-items '((recents . 5)
                               (projects . 5)
                               (agenda . 3)))
       (setq dashboard-banner-logo-title "Happy Hacking!"))
   #+END_SRC
** Evil mode
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t)
     (evil-mode t)
     (setq evil-insert-state-tag "INSERT"
           evil-normal-state-tag "NORMAL"
           evil-visual-state-tag "VISUAL"
           evil-replace-state-tag "REPLACE"
           evil-emacs-state-tag "EMACS")
   #+END_SRC
** Lock-font-plus
   #+BEGIN_SRC emacs-lisp
     (require 'font-lock)
   #+END_SRC
** All the icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons
       :ensure t)
   #+END_SRC
** Neotree
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :ensure t)
     (global-set-key (kbd "<f8>") 'neotree-toggle)
     (global-set-key (kbd "<C-f8>") 'neotree-hidden-file-toggle)
     (setq neo-smart-open t)
     (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
     (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
     (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
     (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
   #+END_SRC
** Doom-themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :preface (defvar region-fg nil))
     (require 'doom-themes)
     (doom-themes-neotree-config)
     (setq doom-neotree-enable-type-colors t)
     (setq doom-neotree-enable-file-icons t)
     (doom-themes-org-config)
     (setq doom-themes-enable-bold t
           doom-themes-enable-italic t)
   #+END_SRC
** Spaceline
   #+BEGIN_SRC emacs-lisp
     (use-package spaceline
       :ensure t
       :config
       (require 'spaceline-config)
       (setq spaceline-buffer-encoding-abbrev-p nil)
       (setq spaceline-line-column-p nil)
       (setq spaceline-line-p nil)
       ;;(setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
       (setq powerline-default-separator (quote arrow))
       (spaceline-spacemacs-theme)
       (spaceline-helm-mode 1))
   #+END_SRC
** Fancy-Battery
#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config (setq fancy-battery-show-percentage t))
  (add-hook 'after-init-hook #'fancy-battery-mode)
#+END_SRC
** Quick Peek
   Used to better display errors with flycheck-inline
#+BEGIN_SRC emacs-lisp
    (use-package quick-peek
    :ensure t)
#+END_SRC
** Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :config (global-flycheck-mode))
   #+END_SRC
** Flycheck-inline
   Displays flycheck-messages inline.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-inline
    :ensure t
    :config (setq flycheck-inline-display-function
                  (lambda (msg pos)
                    (let* ((ov (quick-peek-overlay-ensure-at pos))
                           (contents (quick-peek-overlay-contents ov)))
                      (setf (quick-peek-overlay-contents ov)
                            (concat contents (when contents "\n") msg))
                      (quick-peek-update ov)))
                  flycheck-inline-clear-function #'quick-peek-hide))
  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'turn-on-flycheck-inline))
#+END_SRC
** Elpy
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :ensure t)
     (setq python-shell-interpreter "ipython"
           python-shell-interpreter-args "-i  --simple-prompt")
   #+END_SRC
** Yasnippet
   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :config
       (use-package yasnippet-snippets
         :ensure t)
       (yas-reload-all))
   #+END_SRC
** Company-mode
   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (setq company-idle-delay 0)
       (setq company-minimun-prefix-lenght 1)
       (setq company-tooltip-align-annotations t)) ;; maybe 3?
   #+END_SRC
** Company-jedi
   #+BEGIN_SRC emacs-lisp
     (use-package company-jedi
       :ensure t
       :config
       (require 'company)
       (add-to-list 'company-backends 'company-jedi))
     (defun python-mode-company-init ()
       (setq-local company-backends '((company-jedi
                                       company-etags
                                       company-dabbrev-code))))
     (use-package company-jedi
       :ensure t
       :config
       (require 'company)
       (add-hook 'python-mode-hook 'python-mode-company-init))
   #+END_SRC
** Company-quickhelp
   #+BEGIN_SRC emacs-lisp
     (use-package company-quickhelp
       :ensure t
       :config (eval-after-load 'company
                 '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin)))
     (add-hook 'company-mode-hook #'company-quickhelp-mode)
   #+END_SRC
** Whitepaces-cleanup
   #+BEGIN_SRC emacs-lisp
    (use-package whitespace-cleanup-mode
        :ensure t)
   #+END_SRC
** Smartparens
   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t)
     (require 'smartparens-config)
     (add-hook 'prog-mode #'smartparens-mode)
     (add-hook 'org-mode #'smartparens-mode)
     (smartparens-global-mode t)
   #+END_SRC
** Rainbow
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t)
   #+END_SRC
** Rainbow delimiter
   #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config (rainbow-delimiters-mode t))
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
** Helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :bind
       ("C-x C-f" . 'helm-find-files)
       ("C-x C-b" . 'helm-buffers-list)
       ("M-x" . 'helm-M-x)
       :config
       (setq helm-autoresize-max-height 0
             helm-autoresize-min-height 40
             helm-M-x-fuzzy-match t
             helm-buffers-fuzzy-matching t
             helm-recentf-fuzzy-match t
             helm-semantic-fuzzy-match t
             helm-imenu-fuzzy-match t
             helm-split-window-in-side-p nil
             helm-mode-to-line-cycle-in-source nil
             helm-ff-search-library-in-sexp t
             helm-scroll-amount 8
             helm-echo-input-in-header-line t)
       :init
       (helm-mode 1))
     (require 'helm-config)
     (helm-autoresize-mode 1)
   #+END_SRC
** Hlinum
   #+BEGIN_SRC emacs-lisp
     (use-package hlinum
       :ensure t)
     (hlinum-activate)
     (global-hl-line-mode 1)
     ;; (set-face-background 'hl-line "#3e4446")
     (set-face-background 'hl-line "#1e2029")
     ;; (set-face-background 'highlight nil)
   #+END_SRC
** Relative numbers
   #+BEGIN_SRC emacs-lisp
     (use-package linum-relative
       :ensure t
       :config
       (setq linum-relative-current-symbol ""))
   #+END_SRC
** Simpleclip
   #+BEGIN_SRC emacs-lisp
     (use-package simpleclip
       :ensure t
       :init (simpleclip-mode 1))
   #+END_SRC
** Popup-kill-ring
   #+BEGIN_SRC emacs-lisp
     (use-package popup-kill-ring
       :ensure t
       :bind ("C-M-z" . popup-kill-ring))
   #+END_SRC
** Async
   #+BEGIN_SRC emacs-lisp
     (use-package async
       :ensure t
       :config (async-bytecomp-package-mode 1)
       :init (dired-async-mode 1))
   #+END_SRC
** Swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :ensure t
       :bind ("C-s" . 'swiper))
   #+END_SRC
** Slime
   #+BEGIN_SRC emacs-lisp
     (use-package slime
       :ensure t
       :config
       (setq inferior-lisp-program "/usr/bin/sbcl")
       (setq slime-contribs '(slime-fancy)))
   #+END_SRC
** Slime-company
   #+BEGIN_SRC emacs-lisp
     (use-package slime-company
       :ensure t
       :init
       (require 'company)
       (slime-setup '(slime-fancy slime-company)))
   #+END_SRC
** Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t
       :config (projectile-global-mode)
       (setq projectile-mode-line-function '(lambda () (format "P[%s]" (projectile-project-name))))
       (setq projectile-completion-system 'helm))
   #+END_SRC
** Solaire
   change background color of windows
   #+BEGIN_SRC emacs-lisp
     (use-package solaire-mode
       :ensure t)
     (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
     (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
     (setq solaire-mode-remap-modeline nil)
     (solaire-mode t)
     (solaire-mode-swap-bg)
   #+END_SRC
** Diminish
   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :ensure t)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t)
   #+END_SRC
** Fringe Helper
#+BEGIN_SRC emacs-lisp
  (use-package fringe-helper
    :ensure t)
#+END_SRC
** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe+
    :ensure t)
  (setq git-gutter-fr+-side 'right-fringe) ;; left side is for flycheck
  (set-face-foreground 'git-gutter-fr+-modified "#e77818")
  (set-face-background 'git-gutter-fr+-modified "#e77818")
  (set-face-foreground 'git-gutter-fr+-deleted "#a20417")
  (set-face-background 'git-gutter-fr+-deleted "#a20417")
  (set-face-foreground 'git-gutter-fr+-added "#007144")
  (set-face-background 'git-gutter-fr+-added "#007144")
  (setq-default right-fringe-width 5)
  (setq-default left-fringe-width 20)
#+END_SRC
** Nyan
   #+BEGIN_SRC emacs-lisp
     (use-package nyan-mode
       :ensure t
       :init
       (setq nyan-animate-nyancat t
             nyan-wavy-trail t
             mode-line-format (list
                               '(:eval (list (nyan-create)))))
       (nyan-mode t))
   #+END_SRC
** Auto-highlight
   #+BEGIN_SRC emacs-lisp
     (use-package auto-highlight-symbol
       :ensure t
       :init (global-auto-highlight-symbol-mode))
   #+END_SRC
** Dump jump
   #+BEGIN_SRC emacs-lisp
     (use-package dumb-jump
       :ensure t
       :bind (("M-g o" . dumb-jump-go-other-window)
              ("<C-return>" . dumb-jump-go)
              ("<C-tab>" . dumb-jump-back)
              ("M-g x" . dumb-jump-prefer-external)
              ("M-g z" . dumb-jump-go-prefer-external-other-window))
       :config (setq dumb-jump-selector 'helm))
   #+END_SRC
** LaTeX Preview
   #+BEGIN_SRC emacs-lisp
     (use-package latex-preview-pane
       :ensure t)
     (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode)
     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
   #+END_SRC
** Auctex
   #+BEGIN_SRC emacs-lisp
     (use-package auctex
       :defer t
       :ensure t)
   #+END_SRC
** Company Auctex
#+BEGIN_SRC emacs-lisp
  (use-package company-auctex
    :ensure t)
#+END_SRC
** PDF-Tools
   #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :ensure t
       ;; :config (pdf-tools-install)
       )

     (use-package org-pdfview
       :ensure t)
   #+END_SRC
** Flyspell
   #+BEGIN_SRC emacs-lisp
     (use-package flyspell-popup
       :ensure t)
     (add-hook 'flyspell-mode-hook #'flyspell-popup-auto-correct-mode)
     (define-key flyspell-mode-map (kbd "C-;") #'flyspell-popup-correct)
   #+END_SRC
** Fzf
Fzf fuzzy finder frontend for emacs.
#+BEGIN_SRC emacs-lisp
  (use-package fzf
    :ensure t)
#+END_SRC
** Paradox
   Great improvements for package menu.
#+BEGIN_SRC emacs-lisp
  (use-package paradox
    :ensure t
    :config (paradox-enable))
#+END_SRC
** Toml Mode
   #+BEGIN_SRC emacs-lisp
     (use-package toml-mode
       :ensure t)
   #+END_SRC
* Theme
  #+BEGIN_SRC emacs-lisp
    (load-theme 'doom-dracula
                :no-confirm)
  #+END_SRC
* Basic configurations
** Font
#+BEGIN_SRC emacs-lisp
  (set-default-font "Fira Code 13")
#+END_SRC
** encoding
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-language-environment "UTF-8")
     (set-default-coding-systems 'utf-8)
   #+END_SRC
** Fira Code
    https://github.com/tonsky/FiraCode/wiki/Emacs-instructions
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
     ;; This works when using emacs without server/client
     (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
     ;; I haven't found one statement that makes both of the above situations work, so I use both for now


     (defconst fira-code-font-lock-keywords-alist
       (mapcar (lambda (regex-char-pair)
                 `(,(car regex-char-pair)
                   (0 (prog1 ()
                        (compose-region (match-beginning 1)
                                        (match-end 1)
                                        ;; The first argument to concat is a string containing a literal tab
                                        ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
               '(("\\(www\\)"                   #Xe100)
                 ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
                 ("\\(\\*\\*\\*\\)"             #Xe102)
                 ("\\(\\*\\*/\\)"               #Xe103)
                 ("\\(\\*>\\)"                  #Xe104)
                 ("[^*]\\(\\*/\\)"              #Xe105)
                 ("\\(\\\\\\\\\\)"              #Xe106)
                 ("\\(\\\\\\\\\\\\\\)"          #Xe107)
                 ("\\({-\\)"                    #Xe108)
                 ("\\(\\[\\]\\)"                #Xe109)
                 ("\\(::\\)"                    #Xe10a)
                 ("\\(:::\\)"                   #Xe10b)
                 ("[^=]\\(:=\\)"                #Xe10c)
                 ("\\(!!\\)"                    #Xe10d)
                 ("\\(!=\\)"                    #Xe10e)
                 ("\\(!==\\)"                   #Xe10f)
                 ("\\(-}\\)"                    #Xe110)
                 ("\\(--\\)"                    #Xe111)
                 ("\\(---\\)"                   #Xe112)
                 ("\\(-->\\)"                   #Xe113)
                 ("[^-]\\(->\\)"                #Xe114)
                 ("\\(->>\\)"                   #Xe115)
                 ("\\(-<\\)"                    #Xe116)
                 ("\\(-<<\\)"                   #Xe117)
                 ("\\(-~\\)"                    #Xe118)
                 ("\\(#{\\)"                    #Xe119)
                 ("\\(#\\[\\)"                  #Xe11a)
                 ("\\(##\\)"                    #Xe11b)
                 ("\\(###\\)"                   #Xe11c)
                 ("\\(####\\)"                  #Xe11d)
                 ("\\(#(\\)"                    #Xe11e)
                 ("\\(#\\?\\)"                  #Xe11f)
                 ("\\(#_\\)"                    #Xe120)
                 ("\\(#_(\\)"                   #Xe121)
                 ("\\(\\.-\\)"                  #Xe122)
                 ("\\(\\.=\\)"                  #Xe123)
                 ("\\(\\.\\.\\)"                #Xe124)
                 ("\\(\\.\\.<\\)"               #Xe125)
                 ("\\(\\.\\.\\.\\)"             #Xe126)
                 ("\\(\\?=\\)"                  #Xe127)
                 ("\\(\\?\\?\\)"                #Xe128)
                 ("\\(;;\\)"                    #Xe129)
                 ("\\(/\\*\\)"                  #Xe12a)
                 ("\\(/\\*\\*\\)"               #Xe12b)
                 ("\\(/=\\)"                    #Xe12c)
                 ("\\(/==\\)"                   #Xe12d)
                 ("\\(/>\\)"                    #Xe12e)
                 ("\\(//\\)"                    #Xe12f)
                 ("\\(///\\)"                   #Xe130)
                 ("\\(&&\\)"                    #Xe131)
                 ("\\(||\\)"                    #Xe132)
                 ("\\(||=\\)"                   #Xe133)
                 ("[^|]\\(|=\\)"                #Xe134)
                 ("\\(|>\\)"                    #Xe135)
                 ("\\(\\^=\\)"                  #Xe136)
                 ("\\(\\$>\\)"                  #Xe137)
                 ("\\(\\+\\+\\)"                #Xe138)
                 ("\\(\\+\\+\\+\\)"             #Xe139)
                 ("\\(\\+>\\)"                  #Xe13a)
                 ("\\(=:=\\)"                   #Xe13b)
                 ("[^!/]\\(==\\)[^>]"           #Xe13c)
                 ("\\(===\\)"                   #Xe13d)
                 ("\\(==>\\)"                   #Xe13e)
                 ("[^=]\\(=>\\)"                #Xe13f)
                 ("\\(=>>\\)"                   #Xe140)
                 ("\\(<=\\)"                    #Xe141)
                 ("\\(=<<\\)"                   #Xe142)
                 ("\\(=/=\\)"                   #Xe143)
                 ("\\(>-\\)"                    #Xe144)
                 ("\\(>=\\)"                    #Xe145)
                 ("\\(>=>\\)"                   #Xe146)
                 ("[^-=]\\(>>\\)"               #Xe147)
                 ("\\(>>-\\)"                   #Xe148)
                 ("\\(>>=\\)"                   #Xe149)
                 ("\\(>>>\\)"                   #Xe14a)
                 ("\\(<\\*\\)"                  #Xe14b)
                 ("\\(<\\*>\\)"                 #Xe14c)
                 ("\\(<|\\)"                    #Xe14d)
                 ("\\(<|>\\)"                   #Xe14e)
                 ("\\(<\\$\\)"                  #Xe14f)
                 ("\\(<\\$>\\)"                 #Xe150)
                 ("\\(<!--\\)"                  #Xe151)
                 ("\\(<-\\)"                    #Xe152)
                 ("\\(<--\\)"                   #Xe153)
                 ("\\(<->\\)"                   #Xe154)
                 ("\\(<\\+\\)"                  #Xe155)
                 ("\\(<\\+>\\)"                 #Xe156)
                 ("\\(<=\\)"                    #Xe157)
                 ("\\(<==\\)"                   #Xe158)
                 ("\\(<=>\\)"                   #Xe159)
                 ("\\(<=<\\)"                   #Xe15a)
                 ("\\(<>\\)"                    #Xe15b)
                 ("[^-=]\\(<<\\)"               #Xe15c)
                 ("\\(<<-\\)"                   #Xe15d)
                 ("\\(<<=\\)"                   #Xe15e)
                 ("\\(<<<\\)"                   #Xe15f)
                 ("\\(<~\\)"                    #Xe160)
                 ("\\(<~~\\)"                   #Xe161)
                 ("\\(</\\)"                    #Xe162)
                 ("\\(</>\\)"                   #Xe163)
                 ("\\(~@\\)"                    #Xe164)
                 ("\\(~-\\)"                    #Xe165)
                 ("\\(~=\\)"                    #Xe166)
                 ("\\(~>\\)"                    #Xe167)
                 ("[^<]\\(~~\\)"                #Xe168)
                 ("\\(~~>\\)"                   #Xe169)
                 ("\\(%%\\)"                    #Xe16a)
                 ;;("\\(x\\)"                     #Xe16b)
                 ("[^:=]\\(:\\)[^:=]"           #Xe16c)
                 ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
                 ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

     (defun add-fira-code-symbol-keywords ()
       (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

     (add-hook 'prog-mode-hook
               #'add-fira-code-symbol-keywords)
   #+END_SRC
** Frame name
   #+BEGIN_SRC emacs-lisp
     (setq frame-title-format "CONSOLI")
   #+END_SRC
** no freaking GUI stuff
   #+BEGIN_SRC emacs-lisp
     ;; no toolbar
     (tool-bar-mode -1)

     ;; no menubar
     (menu-bar-mode -1)

     ;; no scroll bar
     (scroll-bar-mode -1)
   #+END_SRC
** yes or no
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** welcome message
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
   #+END_SRC
** scratch message
   #+BEGIN_SRC emacs-lisp
     (setq initial-scratch-message nil
           inhibit-startup-echo-area-message t)
     (message "WELCOME TO EMACS!")
   #+END_SRC
** save last cursor place
   #+BEGIN_SRC emacs-lisp
     (save-place-mode 1)
   #+END_SRC
** line numbers
   #+BEGIN_SRC emacs-lisp
     (setq consoli/modes-to-disable-linum-mode
           (list 'org-mode
                 'helm-mode
                 'dashboard-mode
                 'term-mode
                 'custom-mode
                 'magit-mode
                 'package-menu-mode
                 'doc-view-mode
                 'pdf-view-mode))

     (add-hook 'after-change-major-mode-hook
               '(lambda ()
                  (linum-mode (if (member major-mode consoli/modes-to-disable-linum-mode)
                                  0 1))))
   #+END_SRC
** fill column
   #+BEGIN_SRC emacs-lisp
     (setq default-fill-column 80)
   #+END_SRC
** ansi term
   #+BEGIN_SRC emacs-lisp
     (defvar my-term-shell "/bin/zsh")
     (defadvice ansi-term (before force-zsh)
       (interactive (list my-term-shell)))
     (ad-activate 'ansi-term)
     ;; (global-set-key (kbd "<f6>") 'ansi-term) ;; I use shell-pop now
   #+END_SRC
** pretty simbols
   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-prettify-symbols-mode t))
   #+END_SRC
** scroll
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 9999
           scroll-preserve-screen-position t
           scroll-margin 5)
   #+END_SRC
** backup files
   #+BEGIN_SRC emacs-lisp
     (defvar consoli/backup_dir
       (concat user-emacs-directory "backups"))

     (if (not (file-exists-p consoli/backup_dir))
         (make-directory consoli/backup_dir t))

     (setq backup-directory-alist
           `(("." . ,consoli/backup_dir)))

     (setq backup-by-copying t)
     (setq delete-old-versions t)
     (setq kept-new-versions 3)
     (setq kept-old-versions 2)
     (setq version-control t)
   #+END_SRC
** no auto save files
   #+BEGIN_SRC emacs-lisp
     (setq auto-save-default nil)
   #+END_SRC
** clock
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t)
     (setq display-time-format "%H:%M")
     (display-time-mode 1)
   #+END_SRC
** subwords
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode 1)
   #+END_SRC
** show parens
   #+BEGIN_SRC emacs-lisp
     (require 'paren)
     (set-face-foreground 'show-paren-match "#00BFFF")
     (set-face-background 'show-paren-match (face-background 'default))
     (set-face-attribute 'show-paren-match nil :weight 'extra-bold)
     (show-paren-mode 1)
   #+END_SRC
** maximum entries on the kill ring
   #+BEGIN_SRC emacs-lisp
     (setq kill-ring-max 100)
   #+END_SRC
** Linum mode separator
#+BEGIN_SRC emacs-lisp
  (setq linum-format " %4d \u2502")
#+END_SRC
** use only tls connections
   #+BEGIN_SRC emacs-lisp
     (setq tls-checktrust t)
   #+END_SRC
** auto revert mode
   #+BEGIN_SRC emacs-lisp
     (global-auto-revert-mode 1)
   #+END_SRC
** spaces-instead-tabs
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
   #+END_SRC
** easy move around splits with S-ARROWS
   #+BEGIN_SRC emacs-lisp
     (windmove-default-keybindings)
   #+END_SRC
* My functions
** consoli/edit-init
   #+BEGIN_SRC emacs-lisp
     (defun consoli/edit-init ()
       "Easy open init.el file."
       (interactive)
       (find-file "~/.emacs.d/config.org")
       (message "Welcome back to configuration file!"))
     (global-set-key (kbd "<S-f1>") 'consoli/edit-init)
   #+END_SRC
** consoli/kill-whitespaces
   #+BEGIN_SRC emacs-lisp
     (defun consoli/kill-whitespaces ()
       (interactive)
       (whitespace-cleanup)
       (message "Whitespaces killed!"))

     (global-set-key (kbd "<f9>") 'consoli/kill-whitespaces)
   #+END_SRC
** consoli/indent-context
   #+BEGIN_SRC emacs-lisp
     (defun consoli/indent-context ()
       (interactive)
       (save-excursion
         (beginning-of-defun)
         (set-mark-command nil)
         (end-of-defun)
         (indent-region (region-beginning) (region-end)))
       (message "Indented!"))

     (global-set-key (kbd "<f7>") 'consoli/indent-context)
   #+END_SRC
** consoli/indent-buffer
   #+BEGIN_SRC emacs-lisp
     (defun consoli/indent-buffer ()
       (interactive)
       (indent-region (point-min) (point-max))
       (message "Buffer indented!"))

     (global-set-key (kbd "<C-f7>") 'consoli/indent-buffer)
   #+END_SRC
** consoli/kill-current-buffer
   #+BEGIN_SRC emacs-lisp
     (defun consoli/kill-current-buffer ()
       (interactive)
       (kill-buffer (current-buffer)))
     (global-set-key (kbd "C-x k") 'consoli/kill-current-buffer)
   #+END_SRC
** consoli/reload-config
   #+BEGIN_SRC emacs-lisp
     (defun consoli/reload-config ()
       (interactive)
       (message "Reloading configurations...")
       (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
     (global-set-key (kbd "C-c r") 'consoli/reload-config)
   #+END_SRC
** consoli/infer-indentation-style
#+BEGIN_SRC emacs-lisp
    (defun consoli/infer-indentation-style ()
    "If our souce file use tabs, we use tabs, if spaces, spaces.
    And if neither, we use the current indent-tabs-mode"
    (let ((space-count (how-many "^ " (point-min) (point-max)))
            (tab-count (how-many "^\t" (point-min) (point-max))))
        (if (> space-count tab-count) (setq indent-tabs-mode nil))
        (if (> tab-count space-count) (setq indent-tabs-mode t))))
    (add-hook 'prog-mode-hook #'consoli/infer-indentation-style)
#+END_SRC
** consoli/set-buffer-to-unix-format
   #+BEGIN_SRC emacs-lisp
     (defun consoli/set-buffer-to-unix-format ()
       (interactive)
       (set-buffer-file-coding-system 'undecided-unix nil))
   #+END_SRC
** consoli/set-buffer-to-dos-format
   #+BEGIN_SRC emacs-lisp
     (defun consoli/set-buffer-to-unix-format ()
       (interactive)
       (set-buffer-file-coding-system 'undecided-dos nil))
   #+END_SRC
** consoli/insert-line-bellow
   #+BEGIN_SRC emacs-lisp
     (defun consoli/insert-line-bellow ()
       (interactive)
       (let ((current-point (point)))
         (move-end-of-line 1)
         (open-line 1)
         (goto-char current-point)))
   #+END_SRC
** consoli/insert-line-above
   #+BEGIN_SRC emacs-lisp
     (defun consoli/insert-line-above ()
       (interactive)
       (let ((current-point (point)))
         (move-beginning-of-line 1)
         (newline-and-indent)
         (indent-according-to-mode)
         (goto-char current-point)
         (forward-char)))
   #+END_SRC
** consoli/smart-newline
   https://gist.github.com/brianloveswords/e23cedf3a80bab675fe5
   #+BEGIN_SRC emacs-lisp
     (defun consoli/smart-newline ()
       "Add two newlines and put the cursor at the right indentation
     between them if a newline is attempted when the cursor is between
     two curly braces, otherwise do a regular newline and indent"
       (interactive)
       (if (or
            (and (equal (char-before) 123) ; {
                 (equal (char-after) 125)) ; }
            (and (equal (char-before) 40)  ; (
                 (equal (char-after) 41))) ; )
           (progn (newline-and-indent)
                  (split-line)
                  (indent-for-tab-command))
     (newline-and-indent)))
     (global-set-key (kbd "RET") 'consoli/smart-newline)
   #+END_SRC
** consoli/create-scratch-buffer
   #+BEGIN_SRC emacs-lisp
     (defun consoli/create-scratch-buffer ()
       "Create a scratch buffer"
       (interactive)
       (switch-to-buffer (get-buffer-create "*scratch*"))
       (lisp-interaction-mode))
     (global-set-key (kbd "<C-f12>") 'consoli/create-scratch-buffer)
   #+END_SRC
** consoli/linum-update-window-scale-fix
https://www.emacswiki.org/emacs/LineNumbers
#+BEGIN_SRC emacs-lisp
  (defun consoli/linum-update-window-scale-fix (win)
    "Fix linum for scaled text."
    (set-window-margins win
                        (ceiling (* (if (boundp 'text-scale-mode-step)
                                        (expt text-scale-mode-step
                                              text-scale-mode-amount) 1)
                                    (if (car (window-margins))
                                        (car (window-margins)) 1)
                                    ))))
  (advice-add #'linum-update-window :after #'consoli/linum-update-window-scale-fix)
#+END_SRC
* Useful key-bindings
** Show whitespaces
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f10>") 'whitespace-mode)
   #+END_SRC
** Linum mode toggle
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "<f12>") 'linum-mode)
   #+END_SRC
** iBuffer
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+END_SRC
* Python
** yasnippet
   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook 'yas-minor-mode)
   #+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook 'flycheck-mode)
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
     (with-eval-after-load 'company
       (add-hook 'python-mode-hook 'company-mode))
     ;; take a look at `use-package/company-jedi' for more"
   #+END_SRC
** ipython
   #+BEGIN_SRC emacs-lisp
     (setq python-shell-interpreter "ipython")
   #+END_SRC
* Emacs-lisp
** eldoc
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
   #+END_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
   #+END_SRC
** company
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook 'company-mode)
     ;; take a look at `use-package/smile' and `use-package/slime-company' for more
   #+END_SRC
* Rust
** Rust mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
  :ensure t
  :config (setq rust-format-on-save t))
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq company-tooltip-align-annotations t)
#+END_SRC
** Cargo
   #+BEGIN_SRC emacs-lisp
     (use-package cargo
       :ensure t)
     (add-hook 'rust-mode-hook 'cargo-minor-mode)
   #+END_SRC
** Flycheck-rust
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck-rust
       :ensure t)
   #+END_SRC
** Racer
   #+BEGIN_SRC emacs-lisp
     (use-package racer
       :ensure t)
     (setq racer-cmd "~/.cargo/bin/racer")
     (setq racer-rust-src-path "~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src")
   #+END_SRC
** Auto-use
Auto handle use statemants.
#+BEGIN_SRC emacs-lisp
  (use-package rust-auto-use
    :ensure t)
#+END_SRC
** Ob-Rust
Org-Babel support for Rust.
#+BEGIN_SRC emacs-lisp
  (use-package ob-rust
    :ensure t)
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'rust-mode-hook #'racer-mode)
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)
  (add-hook 'rust-mode #'flycheck-rust-setup)
#+END_SRC
* Haskell
I'm current learning Haskell from the Erik Meijer course, Functional Programming Fundamentals, so lets setup some enviroment.
** Haskell mode
First, the haskell mode.
#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+END_SRC
* Org-config
** Commom settings
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontfy-natively t)
     (setq org-src-tab-acts-natively t)
     (setq org-export-with-smart-quotes t)
     (add-hook 'org-mode-hook 'org-indent-mode)
   #+END_SRC
** Line wrapping
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook
               '(lambda ()
                  (visual-line-mode 1)))
   #+END_SRC
** Emacs-lisp template
#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-structure-template-alist
                '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Haskell template
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("hs" "#+BEGIN_SRC haskell\n?\n#+END_SRC"))
#+END_SRC
** Python template
#+BEGIN_SRC emacs-lisp
    (add-to-list 'org-structure-template-alist
                '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
#+END_SRC
* Diminish configurations
  It need to be the last thing on config file
#+BEGIN_SRC emacs-lisp
  (diminish 'which-key-mode)
  (diminish 'linum-relative-mode)
  (diminish 'subword-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'rainbow-mode)
  (diminish 'helm-mode)
  (diminish 'undo-tree-mode)
  (diminish 'visual-line-mode)
  (diminish 'org-indent-mode)
  (diminish 'whitespace-mode)
  (diminish 'eldoc-mode)
  (diminish 'yas-minor-mode)
  (diminish 'company-mode)
  (diminish 'python-mode)
  (diminish 'page-break-lines-mode)
  (diminish 'highlight-indentation-mode)
  (diminish 'smartparens-mode)
  (diminish 'auto-highlight-symbol-mode)
  (diminish 'racer-mode)
  (diminish 'cargo-minor-mode)
  (diminish 'flycheck-mode)
#+END_SRC


* TODOS
- TODO write some documentation
- TODO improve multi-shell configuration
- TODO use symbols in daminish
- TODO fix all-the-icons bug (wrong named icons)
