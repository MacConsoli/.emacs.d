* Rust mode
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :hook (rust-mode . lsp)
  :bind (:map rust-mode-map
              ("C-c l x" . lsp-rust-analyzer-expand-macro)
              ("C-c l j" . lsp-rust-analyzer-join-lines))
  :custom ((company-tooltip-align-annotation t)
           (lsp-rust-server 'rust-analyzer)
           ;; (lsp-rust-analyzer-server-command '("~/tmp/rust-analyzer/target/release/rust-analyzer"))
           (lsp-rust-analyzer-server-command '("/usr/bin/rust-analyzer"))
           (lsp-rust-analyzer-display-parameter-hints t)
           (lsp-rust-server 'rust-analyzer)
           (lsp-rust-analyzer-display-chaining-hints t)
           ;; sideline notes doesnt interact well with inlay hints
           ;; (lsp-ui-sideline-enable nil)
           ))

(add-hook 'rust-mode 'yas-minor-mode)
#+END_SRC

* Cargo
#+BEGIN_SRC emacs-lisp
(use-package cargo
  :hook (rust-mode . cargo-minor-mode)
  :ensure t)
#+END_SRC

* Racer
#+BEGIN_SRC emacs-lisp
;; (use-package racer
;;   :ensure t
;;   :hook (rust-mode . racer-mode)
;;   (racer-mode . eldoc-mode)
;;   :custom (racer-cmd "~/.cargo/bin/racer")
;;   (eldoc-idle-delay 0.5)
;;   (racer-rust-src-path "~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"))
#+END_SRC

* Rust org babel
#+BEGIN_SRC emacs-lisp
(use-package ob-rust
  :ensure t)
#+END_SRC

* DAP mode
#+BEGIN_SRC emacs-lisp
(add-hook 'dap-mode #'(lambda () (require 'dap-lldb)))
#+END_SRC

